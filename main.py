from decouple import config
from random import randint
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from db import DB

TOKEN = config('TOKEN')

vk = vk_api.VkApi(token=TOKEN)
give = vk.get_api()
longpoll = VkLongPoll(vk)


def command_check(command: str, msg: str) -> bool:
    if command == msg[:len(command)]:
        return True
    return False


def send_msg_to_user(vk_id: int, text: str) -> bool:
    try:
        vk.method('messages.send', {'user_id': vk_id, 'message': text, 'random_id': randint(0, 10000)})
        return True
    except Exception as e:
        print(e)
        return False


def send_msg_to_all(user, msg: str, style: str = 'Default') -> bool:
    receivers_list_cut = []
    receivers_list = DB.get_users_for_msg(user.id)
    x, y = divmod(len(receivers_list), 99)
    if y > 0:
        x += 1
    for i in range(x):
        list_str = []
        for r in receivers_list[-99:]:
            list_str.append(r)
        receivers_list_cut.append(list_str)
        del receivers_list[-99:]
    if style == 'Default':
        text = f"üí¨ [Global]{' [Admin]' if user.is_admin == 1 else ''} {user.username} ({user.id}):\n{msg}"
    else:
        text = msg
    for ids in receivers_list_cut:
        try:
            vk.method('messages.send', {'user_ids': ids, 'message': text, 'random_id': randint(0, 10000)})
            DB.add_massage(text, user.id)
        except Exception as e:
            print(e)
            return False
    return True


def set_user_nick(user, uid: int, nick: str):
    if len(nick) < 20:
        if user is False:
            query = DB.create_user_nick(uid, nick)
        else:
            query = DB.update_user_nick(uid, nick)

        if query:
            send_msg_to_user(uid, f'–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –Ω–∏–∫: {nick}')
        else:
            send_msg_to_user(uid, f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!')
    else:
        send_msg_to_user(uid, f'–¢–≤–æ–π –Ω–∏–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Å–¥–µ–ª–∞–π –µ–≥–æ –∫–æ—Ä–æ—á–µ 20 —Å–∏–º–≤–æ–ª–æ–≤...')


def add_user_to_chat(uid) -> bool:
    if DB.set_in_chat(uid, True):
        send_msg_to_user(uid, 'Welcome to the club, buddy! –¢—ã –≤ —á–∞—Ç–µ!')
        return True
    else:
        send_msg_to_user(uid, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!')
        return False


def remove_user_from_chat(uid) -> bool:
    if DB.set_in_chat(uid, True):
        send_msg_to_user(uid, '–ò–¥–∏ –Ω–∞—Ö! –¢—ã –Ω–∞–º –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω!')
        return True
    else:
        send_msg_to_user(uid, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!')
        return False


def ban_user(uid, _id) -> bool:
    banned_user = DB.get_user_by_id(_id)
    if banned_user is False:
        send_msg_to_user(uid, '–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
        return False
    if DB.set_ban(_id, True):
        send_msg_to_user(uid, f'ID:{_id} –∑–∞–±–∞–Ω–µ–Ω!')
        send_msg_to_user(banned_user.vk_id, f'–ü–µ—Å, —Ç—ã –ø–æ–ª—É—á–∏–ª –±–∞–Ω. –ì–∞–≤–∫–∞–π...')
        return True
    else:
        send_msg_to_user(uid, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!')
        return False


def unban_user(uid, _id) -> bool:
    banned_user = DB.get_user_by_id(_id)
    if banned_user is False:
        send_msg_to_user(uid, '–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
        return False
    if DB.set_ban(_id, False):
        send_msg_to_user(uid, f'ID:{_id} —Ä–∞–∑–±–∞–Ω–µ–Ω!')
        send_msg_to_user(banned_user.vk_id, f'–° —Ç–µ–±—è —Å–Ω—è–ª–∏ –±–∞–Ω! –ü–µ—Ä–µ—Å—Ç–∞–≤–∞–π –≥–∞–≤–∫–∞—Ç—å...')
        return True
    else:
        send_msg_to_user(uid, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!')
        return False


def start_direct_massaging(user, ls_id) -> bool:
    ls_user = DB.get_user_by_id(ls_id)
    if ls_user is False:
        send_msg_to_user(user.vk_id, '–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
        return False
    if DB.user_direct_massaging(user.id, ls_user.vk_id):
        send_msg_to_user(user.vk_id, f'–û—Ç–∫—Ä—ã—Ç —á–∞—Ç —Å {ls_user.username}')
        return True
    else:
        send_msg_to_user(user.vk_id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!')
        return False


def stop_direct_massaging(user) -> bool:
    if DB.user_direct_massaging(user.id, 0):
        send_msg_to_user(user.vk_id, f'–û–∫, —Ç–µ–ø–µ—Ä—å —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–¥—É—Ç –≤ –æ–±—â–∏–π —á–∞—Ç!')
        return True
    else:
        send_msg_to_user(user.vk_id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!')
        return False


def send_ls_msg_to_user(user, message):
    text = f"üí¨ –õ–°{' [Admin]' if user.is_admin == 1 else ''} {user.username} ({user.id}):\n{message}"
    return send_msg_to_user(user.ls_with, text)


def info_about_user(user):
    all_massages = DB.get_all_massages()
    if all_massages is not False:
        _all_massages = len(all_massages)
    else:
        _all_massages = 1
    if _all_massages == 0:
        _all_massages = 1

    user_massages = DB.get_massages_by_id(user.id)
    if user_massages is not False:
        _user_massages = len(user_massages)
    else:
        _user_massages = 1
    if _user_massages == 0:
        _user_massages = 1

    text = f'''
üë§ –ù–∏–∫: {user.username}
–†–æ–ª—å: {'Admin' if user.is_admin == 1 else '–£—á–∞—Å—Ç–Ω–∏–∫'}
–¢–≤–æ–π ID: {user.id}

–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {_all_massages}
–¢–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {_user_massages} ({round(_user_massages / _all_massages * 100)}%)
'''
    return send_msg_to_user(user.vk_id, text)


def online_users(user):
    text = '–°–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω –≤ —á–∞—Ç–µ: \n\n'
    users = DB.get_online_users()
    if users is not False:
        for _user in users:
            text += f'üë§ {_user.username} (ID: {_user.id}) \n'
        return send_msg_to_user(user.vk_id, text)
    else:
        send_msg_to_user(user.vk_id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!')
        return False


def main():
    for event in longpoll.listen():
        if event.type == VkEventType.MESSAGE_NEW and event.to_me:
            vk_user_id = event.user_id
            message = event.text.strip()
            if message == '':
                send_msg_to_user(vk_user_id, '–Ø –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∞–∫–æ–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è!')
                continue
            print(message)
            user = DB.get_user_by_vk_id(vk_user_id)
            if message[0] == '/':
                if command_check('/nick', message):
                    user_nick = message.replace('/nick', '')
                    set_user_nick(user, vk_user_id, user_nick.strip())
                    continue
            if user is not False:
                if user.is_banned == 1:
                    send_msg_to_user(vk_user_id, '–ü–µ—Å, —Ç—ã –≤ –±–∞–Ω–µ, –Ω–∞—Ö—É—è –ø–∏—à–µ—à—å?')
                    continue
                if message[0] == '/':
                    if command_check('/start', message):
                        add_user_to_chat(vk_user_id)
                        send_msg_to_all(user,
                                        f'‚ùó {user.username} (ID: {user.id}) - –¥–æ–±–∞–≤–∏–ª—Å—è –∫ –Ω–∞–º.', style='System')
                        continue
                    elif command_check('/stop', message):
                        remove_user_from_chat(vk_user_id)
                        send_msg_to_all(user,
                                        f'‚ùó {user.username} (ID: {user.id}) - —ç—Ç–∞ —Ç–≤–∞—Ä—å –≤—ã—à–ª–∞ –∏–∑ —á–∞—Ç–∞, –≤—Ä–µ–º—è –µ–≥–æ –æ–±–æ—Å—Å–∞—Ç—å.', style='System')
                        continue
                    elif command_check('/ls ', message):
                        ls_id = message.replace('/ls ', '')
                        try:
                            ls_id = int(ls_id)
                        except Exception as e:
                            print(e)
                            continue
                        start_direct_massaging(user, ls_id)
                        continue
                    elif command_check('/ls_stop', message):
                        stop_direct_massaging(user)
                        continue
                    elif command_check('/info', message):
                        info_about_user(user)
                        continue
                    elif command_check('/online', message):
                        online_users(user)
                        continue
                    elif command_check('/ban', message) and user.is_admin == 1:
                        user_id = message.replace('/ban ', '')
                        ban_user(vk_user_id, user_id)
                        continue
                    elif command_check('/unban', message) and user.is_admin == 1:
                        user_id = message.replace('/unban ', '')
                        unban_user(vk_user_id, user_id)
                        continue
                    else:
                        send_msg_to_user(vk_user_id, '–ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã :(')
                        continue
                elif user.in_chat == 1:
                    if user.ls_with == 0:
                        if send_msg_to_all(user, message) is False:
                            send_msg_to_user(vk_user_id, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–∂–µ –≤—Å–µ —á–∏–Ω–∏–º.')
                        continue
                    else:
                        if send_ls_msg_to_user(user, message) is False:
                            send_msg_to_user(vk_user_id, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–∂–µ –≤—Å–µ —á–∏–Ω–∏–º.')
                        continue
                else:
                    send_msg_to_user(vk_user_id, '–í—ã –Ω–µ –≤ —á–∞—Ç–µ, –ø–∏—à–∏—Ç–µ /start')
            else:
                send_msg_to_user(vk_user_id, '–ù—É–∂–Ω–æ –≤–Ω–∞—á–∞–ª–µ –≤–æ–π—Ç–∏, –ø–∏—à–∏ /nick')
                continue


if __name__ == '__main__':
    main()
